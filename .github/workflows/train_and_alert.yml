name: "üß† Crypto AI Hybrid v13.7 - Fetch ‚Üí Train ‚Üí Alert"

on:
  schedule:
    - cron: "*/30 * * * *"   # Every 30 minutes
  workflow_dispatch:

permissions:
  contents: write
  actions: read

env:
  PYTHONUNBUFFERED: "1"

jobs:
  crypto-ai:
    runs-on: ubuntu-latest

    steps:
      # ---------------------------
      # 1Ô∏è‚É£ Setup and Checkout
      # ---------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          echo "[SETUP] Installing Python dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install yfinance pandas numpy scikit-learn requests joblib matplotlib seaborn pycoingecko ccxt

      # ---------------------------
      # 2Ô∏è‚É£ Prepare required folders
      # ---------------------------
      - name: üóÇ Prepare required folders
        run: |
          echo "[INIT] Ensuring all required folders exist..."
          mkdir -p models data_cache telemetry_logs utils training_summary

      # ---------------------------
      # 3Ô∏è‚É£ Run Multi-Source Data Fetcher
      # ---------------------------
      - name: üì¶ Run Multi-Source Data Fetcher
        run: |
          echo "[RUN] Fetching crypto data using utils/data_fetcher.py..."
          cd "${{ github.workspace }}" || exit 1

          if [ -f "utils/data_fetcher.py" ]; then
            echo "[INFO] ‚úÖ Found utils/data_fetcher.py ‚Äî running..."
            python utils/data_fetcher.py || {
              echo "[‚ùå ERROR] Data fetch failed ‚Äî stopping workflow."
              exit 1
            }
          elif [ -f "data_fetcher.py" ]; then
            echo "[INFO] Found root-level data_fetcher.py ‚Äî running..."
            python data_fetcher.py || {
              echo "[‚ùå ERROR] Root-level data fetch failed ‚Äî stopping workflow."
              exit 1
            }
          else
            echo "[‚ùå ERROR] data_fetcher.py not found in $(pwd)"
            exit 1
          fi

          echo "[INFO] Post-fetch check:"
          ls -lh data_cache || echo "[WARN] No cache created."

      # ---------------------------
      # 4Ô∏è‚É£ Check model freshness
      # ---------------------------
      - name: ‚è± Check model freshness
        id: freshness
        run: |
          echo "[CHECK] Checking if models are older than 2 hours..."
          mkdir -p models
          needs_training=false

          for pair in BTCUSDT XRPUSDT GALAUSDT; do
            model="models/${pair}_model.pkl"
            if [ -f "$model" ]; then
              age_seconds=$(( $(date +%s) - $(stat -c %Y "$model") ))
              echo "[INFO] $model age: ${age_seconds}s"
              if [ $age_seconds -gt 7200 ]; then
                echo "[WARN] $model older than 2 hours ‚Äî retraining required."
                needs_training=true
              fi
            else
              echo "[WARN] Missing model for $pair ‚Äî retraining required."
              needs_training=true
            fi
          done

          echo "needs_training=$needs_training" >> $GITHUB_ENV
          echo "[RESULT] Training needed: $needs_training"

      # ---------------------------
      # 5Ô∏è‚É£ Train AI Models Conditionally
      # ---------------------------
      - name: üß† Train AI Models
        if: env.needs_training == 'true'
        run: |
          echo "[TRAIN] Starting model training..."
          python train_ai_model.py || echo "[WARN] Training script encountered an issue."

      - name: ‚úÖ Skip Training (Models Fresh)
        if: env.needs_training == 'false'
        run: echo "[INFO] Models are fresh (<2h). Skipping training."

      # ---------------------------
      # 6Ô∏è‚É£ Run Spike Predictor (with patch)
      # ---------------------------
      - name: ‚ö° Run Spike Predictor
        run: |
          echo "[RUN] Executing spike predictor..."
          cd "${{ github.workspace }}" || exit 1

          if [ -f "spike_predictor.py" ]; then
            echo "[INFO] ‚úÖ Found spike_predictor.py ‚Äî running..."
            python spike_predictor.py || echo "[WARN] Spike predictor exited with non-zero status."
          elif [ -f "utils/spike_predictor.py" ]; then
            echo "[INFO] Found utils/spike_predictor.py ‚Äî running..."
            python utils/spike_predictor.py || echo "[WARN] Spike predictor exited with non-zero status."
          else
            echo "[‚ùå ERROR] spike_predictor.py not found in $(pwd) or utils/"
          fi

      # ---------------------------
      # 7Ô∏è‚É£ Run Crypto AI Alert Logic (v10) (with patch)
      # ---------------------------
      - name: üö® Run Crypto AI Alert Logic (v10)
        run: |
          echo "[RUN] Executing crypto alert logic..."
          cd "${{ github.workspace }}" || exit 1

          if [ -f "crypto_ai_alert_v10.py" ]; then
            echo "[INFO] ‚úÖ Found crypto_ai_alert_v10.py ‚Äî running..."
            python crypto_ai_alert_v10.py || echo "[WARN] Alert logic exited with non-zero status."
          elif [ -f "utils/crypto_ai_alert_v10.py" ]; then
            echo "[INFO] Found utils/crypto_ai_alert_v10.py ‚Äî running..."
            python utils/crypto_ai_alert_v10.py || echo "[WARN] Alert logic exited with non-zero status."
          else
            echo "[‚ùå ERROR] crypto_ai_alert_v10.py not found in root or utils/"
          fi

      # ---------------------------
      # 8Ô∏è‚É£ Upload Trained Models
      # ---------------------------
      - name: üíæ Upload Trained Models
        uses: actions/upload-artifact@v4
        with:
          name: trained_models
          path: models/

      # ---------------------------
      # 9Ô∏è‚É£ Upload Telemetry Logs
      # ---------------------------
      - name: üìä Upload Telemetry Logs
        uses: actions/upload-artifact@v4
        with:
          name: telemetry_logs
          path: telemetry_logs/

      # ---------------------------
      # üîü Commit and Push Models + Telemetry
      # ---------------------------
      - name: ü™∂ Commit and Push Models + Telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "[GIT] Saving models and telemetry logs..."
          git config user.email "actions@github.com"
          git config user.name "github-actions[bot]"
          git add -f models/*.pkl telemetry_logs/*.json data_cache/* training_summary/* || true
          if git diff --cached --quiet; then
            echo "[INFO] No changes detected, skipping commit."
          else
            git commit -m "ü§ñ Auto-update: Models + Telemetry ($(date '+%Y-%m-%d %H:%M:%S'))"
            git pull --rebase origin main || echo "[WARN] Rebase skipped or failed."
            git push origin main || echo "[WARN] Push failed (check permissions)."
          fi

      # ---------------------------
      # ‚úÖ Finish
      # ---------------------------
      - name: ‚úÖ Done
        run: echo "[FINISH] Crypto AI Hybrid v13.7 workflow completed successfully."
