name: Crypto AI Hybrid v13.3 - Train & Alert

on:
  schedule:
    - cron: "*/30 * * * *"  # Every 30 minutes
  workflow_dispatch:

permissions:
  contents: write
  actions: read

env:
  USE_COINGECKO_DEMO: "true"
  COINGECKO_API_KEY: ""
  PYTHONUNBUFFERED: "1"

jobs:
  run-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Setup Python
      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3Ô∏è‚É£ Install dependencies
      - name: ‚öôÔ∏è Install dependencies
        run: |
          echo "[SETUP] Installing Python dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install yfinance pandas scikit-learn joblib requests beautifulsoup4 lxml

      # 4Ô∏è‚É£ Ensure required folders exist
      - name: üóÇÔ∏è Prepare required folders
        run: |
          echo "[INIT] Ensuring models, data_cache, telemetry_logs exist..."
          mkdir -p models data_cache telemetry_logs training_summary
          touch models/.gitkeep data_cache/.gitkeep telemetry_logs/.gitkeep

      # 5Ô∏è‚É£ Check model freshness
      - name: üïí Check model freshness
        id: model_check
        run: |
          echo "[CHECK] Checking if models are older than 2 hours..."
          THRESHOLD=$((60 * 60 * 2))  # 2 hours in seconds
          REBUILD=false
          CURRENT_TIME=$(date +%s)

          for FILE in models/*_model.pkl; do
            if [ -f "$FILE" ]; then
              MOD_TIME=$(date -r "$FILE" +%s)
              AGE=$((CURRENT_TIME - MOD_TIME))
              echo "[INFO] $FILE age: $AGE seconds"
              if [ "$AGE" -ge "$THRESHOLD" ]; then
                echo "[WARN] $FILE is older than 2 hours ‚Üí retraining needed."
                REBUILD=true
                break
              fi
            else
              echo "[WARN] Missing model: $FILE ‚Üí retraining required."
              REBUILD=true
              break
            fi
          done

          echo "rebuild=$REBUILD" >> $GITHUB_OUTPUT

      # 6Ô∏è‚É£ Conditional: Train AI Models if outdated
      - name: üß† Train AI Models
        if: steps.model_check.outputs.rebuild == 'true'
        run: |
          echo "[RUN] Starting AI model training (outdated or missing models)..."
          python train_ai_model.py || echo "[WARN] Training script encountered a warning."

      # 7Ô∏è‚É£ Optional: Spike Predictor
      - name: ‚ö° Run Spike Predictor
        if: always()
        run: |
          echo "[RUN] Running spike predictor (if present)..."
          if [ -f spike_predictor.py ]; then
            python spike_predictor.py || echo "[WARN] Spike predictor exited with warnings."
          else
            echo "[INFO] No spike_predictor.py found, skipping."
          fi

      # 8Ô∏è‚É£ Run Crypto AI Alert Logic
      - name: üö® Run Crypto AI Alert Logic
        if: always()
        run: |
          echo "[RUN] Executing crypto alert logic..."
          python crypto_ai_alert_v11.py || echo "[WARN] Alert logic exited with non-zero status."

      # 9Ô∏è‚É£ Upload trained models (if rebuilt)
      - name: üì§ Upload Trained Models
        if: steps.model_check.outputs.rebuild == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: trained_models
          path: models/

      # üîü Upload telemetry logs
      - name: üì§ Upload Telemetry Logs
        uses: actions/upload-artifact@v4
        with:
          name: telemetry_logs
          path: telemetry_logs/

      # 1Ô∏è‚É£1Ô∏è‚É£ Cleanup telemetry logs (optional)
      - name: üßπ Cleanup Telemetry Logs
        run: |
          echo "[RUN] Cleaning up old telemetry logs..."
          if [ -f telemetry_cleanup.py ]; then
            python telemetry_cleanup.py || echo "[WARN] Cleanup script failed."
          else
            echo "[INFO] No telemetry_cleanup.py found, skipping."
          fi

      # 1Ô∏è‚É£2Ô∏è‚É£ Commit & push updates only if needed
      - name: üîÑ Commit and Push Updated Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "[GIT] Preparing to commit trained models + telemetry..."
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions Bot"

          # Force add models, telemetry, and summaries
          git add -f models/*.pkl telemetry_logs/*.json data_cache/* training_summary/*.json || true

          if git diff --cached --quiet; then
            echo "[INFO] No changes detected. Skipping commit."
          else
            git commit -m "ü§ñ Auto-update: trained models + telemetry @ $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git pull --rebase origin main || echo "[WARN] Pull/rebase failed, continuing."
            git push origin main || echo "[WARN] Push failed (possible race)."
          fi

      # ‚úÖ Finish
      - name: ‚úÖ Done
        run: echo "[FINISH] Crypto AI Hybrid v13.3 workflow completed successfully."
